#!/bin/bash
# Created Fri Mar 23 09:16:50 AKDT 2012
# Last updated: Tue Sep 24 13:45:46 AKDT 2019
# Copyright (C) 2012-2019 by Raymond E. Marcil <marcilr@gmail.com>
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.
#
# Script to generate text file with standard header:
#   Created DDD MMM DD HH:MM:SS AKST YYYY
#   Copyright (C) YYYY by Raymond E. Marcil <marcilr@gmail.com>
#
# If current working directory is State of Alaska OIT DNR:
#   Created DDD MMM DD HH:MM:SS AKST YYYY
#   by Raymond E. Marcil <ray.marcil@alaska.gov>
#
# Usage: create [OPTION]... [FILE]
# Options:
#   -d | --debug     Enable debugging
#   -v | --version   Display version
#   -h | --help      Display help
# [FILE]           Optional text file to create.  Defaults to README
#
#
# Tue Sep 24 13:47:44 AKDT 2019
# =============================
# o Updated for setting copyright when not in git repos
# o Prefixed debugging output with function()
# o Updated version from 0.0.1 to 0.0.2
# o Added "Last updated: " to --version output
#
# Tue Aug 13 09:38:14 AKDT 2019
# =============================
# Updated to set header based up git repo source determined with:
#   git remote -v
#
# If repo url contains 'dnratwtfsp' for SOA OIT DNR then
# the 2nd line of the header will be:
#   "by Raymond E. Marcil <ray.marcil@alaska.gov>
#
# If the repo url contains 'marcilr' or is inidentified
# then the 2nd line of the header is set to:
#   "Copyright (C) 2019 by Raymond E. Marcil <marcilr@gmail.com>"
#
#
# Links
# =====
# Advanced Bash-Scripting Guide
# An in-depth exploration of the art of shell scripting
# Mendel Cooper <thegrendel.abs@gmail.com>
#
# BASH If String Contains in case Statement
# https://stackoverflow.com/questions/22712156/bash-if-string-contains-in-case-statement
#
# How do I prompt for input in a Linux shell script?
# http://stackoverflow.com/questions/226703/how-do-i-prompt-for-input-in-a-linux-shell-script
#

# =============
# Configuration
# =============
VERSION="0.0.2"

#
# Default target to create if not specified on command line.
#
TARGET=README

# Disabling debugging by default
DEBUG=-1

# ========
# Binaries
# ========
DATE=/bin/date
EXPR=/usr/bin/expr
GIT=/usr/bin/git
TR=/usr/bin/tr

# Get datestamp.
DATESTAMP=`${DATE}`

YEAR=`${DATE} +%Y`

# Get arguments
ARGS=$@

# Get number of arguments
NUMARGS=$#

# =========
# Functions
# =========

#
# Display usage.
#
usage(){
  echo "Usage: create [OPTION]... [FILE]"
  echo "Options:"
  echo "  -d | --debug     Enable debuggging"
  echo "  -v | --version   Display version"
  echo "  -h | --help      Display help"
  echo "  [FILE]           Optional text file to create.  Defaults to README."
  exit 0
}   # End usage()


#
# Display version
#
version(){
  echo "create v${VERSION}"
  echo "Created Fri Mar 23 09:16:50 AKDT 2012"
  echo "Last updated: Tue Sep 24 13:45:46 AKDT 2019"
  echo "Copyright (C) 2012-2019 by Raymond E. Marcil <marcilr@gmail.com>"
  echo "License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
  echo "This is free software: you are free to change and redistribute it."
  echo "There is NO WARRANTY, to the extent permitted by law."
  exit 0
}   # End version()

#
# Logging function.
# Will echo MESSAGE if DEBUG>0
#
log(){
  if [ "${DEBUG}" -gt "0" ]; then
    echo ${MESSAGE}
  fi
}


#
# Non-case sensitive cli argument processing.
# input:  ARG - Argument to process.
# output: Processes argument.
#
# NOTE: Only process "-f" or "--foo" style arguments.
#       Does not process "-b baz" 2-value arguments.
#
# FIXME: Proper gnu language to describe "-b baz" 2-value arguments?
#
processArgument(){

  # Convert argument to all lower case for processing.
  ARG=`echo ${ARG} | ${TR} '[:upper:]' '[:lower:]'`

  #
  # Use of ${1} does not work here.
  #
  case "${ARG}" in
    -d|--debug)
               # "-d" or "--debug" parameter?
               DEBUG=1
	               ;;
    -h|--help)
              usage
              ;;
    -v|--version)
              version
              ;;
    *)
              usage
              ;;
  esac
  MESSAGE="processArgument(${ARG})" && log
}   # End processArgument()


#
# createFile()
# Create file with standard header and copyright.
# input:  FILE
# output: Creates FILE with standard header and copyright.
#
createFile(){
  #
  # Assume file exists and should not be created.
  #
  FLAG=false

  MESSAGE="createFile(${1})" && log


  #
  # Check if target file exists.
  #
  if [ -e ${FILE} ]; then

    while true; do
      #
      # Query whether to overwrite existing file.
      #
      read -p "Target ${FILE} exists, overwrite? [n] " yn
      case $yn in
        [Yy]* )
               # Set flag for file to be created.
               FLAG=true
               break
               ;;
        * )    break
               ;;
      esac
    done

  else
    MESSAGE="createFile() ${FILE} does not exist." && log

    # Set flag for file to be created.
    FLAG=true
  fi

  if [ ${FLAG} = "true" ]; then

    #
    # Create file.
    #
    echo ${FILE} > ${FILE}
    echo "Created ${DATESTAMP}" >> ${FILE}

    # Set default copyright to 'marcilr'
    COPYRIGHT="Copyright (C) ${YEAR} by Raymond E. Marcil <marcilr@gmail.com>"

    # Check if git exists
    if hash git 2>/dev/null; then
        MESSAGE="processArgument(): git found" && log

        # Get repository url from current workng directory
        REPOURL=`${GIT} remote -v`

        # =========================================
        # If State of Alaska OIT DNR git repository
        # don't set copyright.
        # =========================================
        case $REPOURL in
           # State of Alaska OIT DNR git repo
           *"dnratwtfsp"*)
               MESSAGE="createFile() In dnratwtfsp git repo" && log
               COPYRIGHT="by Raymond E. Marcil <ray.marcil@alaska.gov>";;
           # marcilr git repo
           *"marcilr"*)
               MESSAGE="In marcilr git repo" && log
               COPYRIGHT="Copyright (C) ${YEAR} by Raymond E. Marcil <marcilr@gmail.com>";;
           # Unrecognized git repo use default copyright
           #*)
           #    MESSAGE="Unrecognized git repo" && log
           #    COPYRIGHT="Copyright (C) ${YEAR} by Raymond E. Marcil <marcilr@gmail.com>";;
        esac
    else
        MESSAGE="processArgument(): git not found" && log
    fi   # End if hash git 2>/dev/null; then

    # Write copyright to file
    echo ${COPYRIGHT} >> ${FILE}

    MESSAGE="createFile() Created: ${FILE}" && log
  fi   # End if [ ${FLAG} = "true" ]; then
}   # End createFile()


#
# Process cli parameters.
#
while [ $# -gt 0 ]; do
  FIRSTCHAR=`${EXPR} substr "${1}" 1 1`

  #
  # Check if this parameter begins with "-" dash.
  # YES - Process with processArgument.
  # NO  - Must be FILE target parameter.
  #
  if [ ${FIRSTCHAR} = '-' ]; then
    #
    # Pass cli parameter to processArgument.
    #
    ARG=${1}
    processArgument
  else
    #
    # Added parameter to target.
    # Yes - multiple targets are supported.
    #
    ARG=${1}
    TARGET2="${TARGET2} ${ARG}"
  fi

  shift       # Check next set of parameters.
done


#
# Report number of command line arguments.
#
MESSAGE="createFile() Number arguments: ${NUMARGS}" && log

#
# If target parameter(s) passed via clie set target to it.
#
if [ -n "${TARGET2}" ]; then
  TARGET=${TARGET2}
fi

#
# Report target.
#
MESSAGE="createFile() TARGET: ${TARGET}" && log

#
# Loop over target file(s).
#
for FILE in ${TARGET}; do
  createFile ${FILE}
done

exit 0
